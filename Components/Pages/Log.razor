@page "/log"
@using Misuzu.Database
@using Misuzu.Database.Models
@inject RealmDbContext RealmDbContext
@inject Misuzu.Services.WebhookService WebhookService
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Log - Misuzu</PageTitle>

<div class="space-y-6">
    <div>
        <h1 class="text-3xl font-bold text-white">New Immersion Log</h1>
        <p class="text-zinc-400 mt-2">Track your language learning progress</p>
    </div>

    <div class="bg-zinc-900 border border-zinc-800 shadow-lg">
        <div class="p-6 space-y-6">
            <div>
                <label class="block text-sm font-medium text-zinc-300 mb-4">Library Entry *</label>
                <LibraryCarousel Entries="sortedLibraryEntries" 
                                 SelectedEntryId="@newLog.Content" 
                                 OnEntrySelected="SelectEntry"
                                 Interactive="true"
                                 DisableCardLinks="true" />
            </div>

            <div>
                <label class="block text-sm font-medium text-zinc-300 mb-2">Amount <span class="text-xs text-zinc-500 mt-1">Pages read, episodes watched, etc.</span></label>
                <input type="number" class="w-full px-4 py-2.5 bg-zinc-800 border border-zinc-700 text-white focus:outline-none focus:border-purple-500" @bind="newLog.Amount" />
                
            </div>

            <div>
                <label class="block text-sm font-medium text-zinc-300 mb-2">Duration <span class="text-xs text-zinc-500 mt-1">minutes</span></label>
                <input type="number" class="w-full px-4 py-2.5 bg-zinc-800 border border-zinc-700 text-white focus:outline-none focus:border-purple-500" @bind="durationMinutes" />
            </div>

            <div>
                <label class="block text-sm font-medium text-zinc-300 mb-2">Comment</label>
                <textarea class="w-full px-4 py-2.5 bg-zinc-800 border border-zinc-700 text-white focus:outline-none focus:border-purple-500 min-h-[100px]" @bind="newLog.Comment"></textarea>
                </div>

            <button @onclick="SaveLog" 
                    disabled="@(!CanSave)"
                    class="w-full px-6 py-3 bg-purple-600 hover:bg-purple-700 disabled:bg-zinc-700 disabled:cursor-not-allowed text-white font-medium transition-colors shadow-lg">
                Save Entry
            </button>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="bg-emerald-900 border border-emerald-700 text-emerald-200 px-4 py-3">
                    <div class="flex items-center gap-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                        @message
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private ImmersionLog newLog = new();
    private int durationMinutes = 0;
    private string message = string.Empty;

    private List<LibraryEntry> libraryEntries = new();
    private List<LibraryEntry> sortedLibraryEntries = new();

    protected override void OnInitialized()
    {
        libraryEntries = RealmDbContext.GetLibraryEntries().ToList();
        
        var threeDaysAgo = DateTime.Now.AddDays(-3);
        var recentLogs = RealmDbContext.GetImmersionLogs()
            .ToList()
            .Where(log => log.TimeStamp.LocalDateTime >= threeDaysAgo)
            .GroupBy(log => log.Content)
            .Select(g => new { LibraryId = g.Key, LatestTimestamp = g.Max(l => l.TimeStamp) })
            .OrderByDescending(x => x.LatestTimestamp)
            .ToList();

        var recentLibraryIds = recentLogs.Select(x => x.LibraryId).ToHashSet();
        
        var recentEntries = recentLogs
            .Select(x => libraryEntries.FirstOrDefault(e => e.Id == x.LibraryId))
            .Where(e => e != null)
            .ToList();
        
        var remainingEntries = libraryEntries
            .Where(e => !recentLibraryIds.Contains(e.Id))
            .OrderByDescending(e => e.Id)
            .ToList();
        
        sortedLibraryEntries = recentEntries.Concat(remainingEntries).ToList();
    }

    private void SelectEntry(string entryId)
    {
        newLog.Content = entryId;
        StateHasChanged();
    }

    private bool CanSave => !string.IsNullOrWhiteSpace(newLog.Content);

    private void SaveLog()
    {
        newLog.Duration = TimeSpan.FromMinutes(durationMinutes);
        newLog.TimeStamp = DateTimeOffset.Now;
        newLog.Type = libraryEntries.Where(_ => _.Id == newLog.Content).First().Type;

        RealmDbContext.AddImmersionLog(newLog);

        WebhookService.Dispatch(newLog, Services.WebhookAction.Added);

        message = "Immersion log saved successfully!";

        newLog = new ImmersionLog();
        durationMinutes = 0;
    }
}
