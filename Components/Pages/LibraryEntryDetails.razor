@page "/library/{Id}"
@rendermode InteractiveServer
@using Misuzu.Database.Models
@inject Realms.Realm Realm
@inject NavigationManager Navigation

<PageTitle>@entrySnapshot.Title - Misuzu</PageTitle>

@code {
    [Parameter] public string Id { get; set; } = string.Empty;

    private LibraryEntry? entrySnapshot;
    private LibraryEntry modalEntry = new();
    private bool isEditModalOpen = false;
    private bool isDeleteModalOpen = false;
    private bool isCompleteModalOpen = false;
    private DateTime customCompleteDate = DateTime.Now.Date;
    private int totalMinutes = 0;
    private int totalAmount = 0;

    protected override void OnInitialized()
    {
        // Materialize a local copy of the entry
        var entry = Realm.All<LibraryEntry>().FirstOrDefault(e => e.Id == Id);
        if (entry != null)
        {
            entrySnapshot = new LibraryEntry
                {
                    Id = entry.Id,
                    Title = entry.Title,
                    Description = entry.Description,
                    Type = entry.Type,
                    CoverImage = entry.CoverImage,
                    BannerImage = entry.BannerImage,
                    ProviderUrl = entry.ProviderUrl,
                    Completed = entry.Completed,
                    CompletedAt = entry.CompletedAt
                };

            var logs = Realm.All<ImmersionLog>().Where(log => log.Content == Id).ToList();
            totalMinutes = (int)logs.Sum(log => log.Duration.TotalMinutes);
            totalAmount = logs.Sum(log => log.Amount);
        }
    }

    private void ShowCompleteModal()
    {
        customCompleteDate = DateTime.Now.Date;
        isCompleteModalOpen = true;
    }

    private void CloseCompleteModal()
    {
        isCompleteModalOpen = false;
    }

    private void CompleteWithToday()
    {
        CompleteEntry(DateTimeOffset.Now);
        CloseCompleteModal();
    }

    private void CompleteWithCustomDate()
    {
        CompleteEntry(new DateTimeOffset(customCompleteDate));
        CloseCompleteModal();
    }

    private void CompleteEntry(DateTimeOffset completedAt)
    {
        var entry = Realm.All<LibraryEntry>().FirstOrDefault(e => e.Id == Id);
        if (entry != null)
        {
            Realm.Write(() =>
            {
                entry.Completed = true;
                entry.CompletedAt = completedAt;
            });

            if (entrySnapshot != null)
            {
                entrySnapshot.Completed = entry.Completed;
                entrySnapshot.CompletedAt = entry.CompletedAt;
            }
        }
    }

    private void Uncomplete()
    {
        var entry = Realm.All<LibraryEntry>().FirstOrDefault(e => e.Id == Id);
        if (entry != null)
        {
            Realm.Write(() =>
            {
                entry.Completed = false;
                entry.CompletedAt = DateTimeOffset.MinValue;
            });

            if (entrySnapshot != null)
            {
                entrySnapshot.Completed = entry.Completed;
                entrySnapshot.CompletedAt = entry.CompletedAt;
            }
        }
    }

    private void ShowEditModal()
    {
        if (entrySnapshot != null)
        {
            modalEntry = new LibraryEntry
            {
                Id = entrySnapshot.Id,
                Title = entrySnapshot.Title,
                Description = entrySnapshot.Description,
                Type = entrySnapshot.Type,
                CoverImage = entrySnapshot.CoverImage,
                BannerImage = entrySnapshot.BannerImage,
                ProviderUrl = entrySnapshot.ProviderUrl,
                Completed = entrySnapshot.Completed
            };
            isEditModalOpen = true;
        }
    }

    private void CloseEditModal()
    {
        isEditModalOpen = false;
    }

    private void HandleSave()
    {
        var entry = Realm.All<LibraryEntry>().FirstOrDefault(e => e.Id == Id);
        if (entry != null)
        {
            entrySnapshot = new LibraryEntry
            {
                Id = entry.Id,
                Title = entry.Title,
                Description = entry.Description,
                Type = entry.Type,
                CoverImage = entry.CoverImage,
                BannerImage = entry.BannerImage,
                ProviderUrl = entry.ProviderUrl,
                Completed = entry.Completed,
                CompletedAt = entry.CompletedAt
            };
        }
    }

    private void ShowDeleteConfirmation()
    {
        isDeleteModalOpen = true;
    }

    private void CloseDeleteConfirmation()
    {
        isDeleteModalOpen = false;
    }

    private void ConfirmDelete()
    {
        var entryToDelete = Realm.All<LibraryEntry>().FirstOrDefault(e => e.Id == Id);
        if (entryToDelete != null)
        {
            Realm.Write(() => Realm.Remove(entryToDelete));
        }

        entrySnapshot = null;
        isDeleteModalOpen = false;
        Navigation.NavigateTo("/library");
    }
}


@if (entrySnapshot == null)
{
    <div class="space-y-6">
        <div class="bg-zinc-900 p-8 text-center border border-zinc-800 shadow-lg">
            <h2 class="text-2xl font-bold text-white mb-2">Entry not found</h2>
            <p class="text-zinc-400">No LibraryEntry with ID: @Id</p>
            <a href="/library" class="inline-block mt-4 px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white font-medium transition-colors">
                Back to Library
            </a>
        </div>
    </div>
}
else
{
    <div class="-mx-6 -mt-6 mb-0">
        <div class="relative overflow-visible shadow-2xl">
            <img src="/images/@entrySnapshot.BannerImage" 
                 alt="Banner for @entrySnapshot.Title" 
                 class="w-full h-64 object-cover" />
            <div class="absolute inset-0 bg-gradient-to-t from-zinc-950 via-zinc-950/50 to-transparent"></div>
            
            <div class="absolute bottom-0 left-0 right-0 p-6">
                <div class="max-w-7xl mx-auto">
                    <div class="flex gap-6 items-end">
                        <div class="flex-shrink-0 w-64 relative overflow-hidden shadow-2xl" style="top: 12rem; aspect-ratio: 2/3;">
                            <img src="/images/@entrySnapshot.CoverImage" 
                                 alt="Cover for @entrySnapshot.Title" 
                                 class="w-full h-full object-cover" />
                        </div>
                        
                        <div class="pb-4 flex-1">
                            <h1 class="text-5xl font-bold text-white mb-3 drop-shadow-lg">@entrySnapshot.Title</h1>
                            <div class="inline-block px-4 py-2 bg-purple-600 border border-purple-500 text-white text-sm font-semibold shadow-lg">
                                @entrySnapshot.Type.ToString()
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="grid gap-6" style="grid-template-columns: 16rem 1fr;">
        <div style="margin-top: 12rem;">
            <div class="bg-zinc-900 border border-zinc-800 p-6 shadow-lg space-y-4">
                <h2 class="text-lg font-semibold text-white mb-4">Actions</h2>
                <div class="flex flex-col gap-3">
                    <button @onclick="ShowEditModal" 
                            class="px-6 py-3 bg-purple-900 hover:bg-purple-800 text-purple-200 border border-purple-700 font-medium transition-colors flex items-center gap-2 shadow-lg">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                        Edit Entry
                    </button>

                    @if (!entrySnapshot.Completed)
                    {
                        <button @onclick="ShowCompleteModal" 
                                class="px-6 py-3 bg-emerald-900 hover:bg-emerald-800 text-emerald-200 border border-emerald-700 font-medium transition-colors flex items-center gap-2 shadow-lg">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                            </svg>
                            Mark Complete
                        </button>
                    }
                    else
                    {
                        <button @onclick="Uncomplete" 
                                class="px-6 py-3 bg-yellow-900 hover:bg-yellow-800 text-yellow-200 border border-yellow-700 font-medium transition-colors flex items-center gap-2 shadow-lg">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                            Uncomplete
                        </button>
                    }
                    
                    <button @onclick="ShowDeleteConfirmation" 
                            class="px-6 py-3 bg-red-900 hover:bg-red-800 text-red-200 border border-red-700 font-medium transition-colors flex items-center gap-2 shadow-lg">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                        Delete Entry
                    </button>
                </div>
            </div>
        </div>

        <div class="space-y-6">
            <div class="bg-zinc-900 border border-zinc-800 p-6 shadow-lg">
                <h2 class="text-lg font-semibold text-white mb-3">Description</h2>
                <p class="text-zinc-300 leading-relaxed">@entrySnapshot.Description</p>
            </div>

            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                <div class="bg-zinc-900 border border-zinc-800 p-6 shadow-lg">
                    <h2 class="text-lg font-semibold text-white mb-4">Details</h2>
                    <div class="space-y-3">
                        <div>
                            <span class="text-zinc-500 text-sm">Provider URL</span>
                            <div class="mt-1">
                                <a href="@entrySnapshot.ProviderUrl" 
                                   target="_blank"
                                   class="text-purple-400 hover:text-purple-300 flex items-center gap-2 break-all">
                                    @entrySnapshot.ProviderUrl
                                    <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                                    </svg>
                                </a>
                            </div>
                        </div>
                        <div>
                            <span class="text-zinc-500 text-sm">Entry ID</span>
                            <div class="mt-1 text-zinc-400 font-mono text-sm">@entrySnapshot.Id</div>
                        </div>
                    </div>
                </div>

                <div class="bg-zinc-900 border border-zinc-800 p-6 shadow-lg">
                    <h2 class="text-lg font-semibold text-white mb-4">Progress</h2>
                    <div class="space-y-4">
                        <div class="flex items-center gap-3">
                            @if (!entrySnapshot.Completed)
                            {
                                <div class="flex items-center gap-2 text-zinc-400">
                                    <div class="w-5 h-5 border-2 border-zinc-600"></div>
                                    <span>In Progress</span>
                                </div>
                            }
                            else
                            {
                                <div class="flex items-center gap-2 text-emerald-400">
                                    <div class="w-5 h-5 bg-emerald-600 border-2 border-emerald-600 flex items-center justify-center">
                                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7" />
                                        </svg>
                                    </div>
                                    <div class="flex flex-col">
                                        <span>Completed</span>
                                        @if (entrySnapshot.CompletedAt != DateTimeOffset.MinValue)
                                        {
                                            <span class="text-xs text-zinc-500">@entrySnapshot.CompletedAt.LocalDateTime.ToString("MM/dd/yyyy")</span>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="border-t border-zinc-800 pt-4 space-y-2">
                            <div class="flex justify-between text-sm">
                                <span class="text-zinc-500">Total Time</span>
                                <span class="text-white font-semibold">@(totalMinutes / 60)h @(totalMinutes % 60)m</span>
                            </div>
                            <div class="flex justify-between text-sm">
                                <span class="text-zinc-500">Total Amount</span>
                                <span class="text-white font-semibold">@totalAmount.ToString("N0")</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <LibraryEntryModal IsOpen="isEditModalOpen" 
                       Entry="modalEntry" 
                       OnClose="CloseEditModal" 
                       OnSave="HandleSave"
                       IsEditMode="true"/>

    @if (isCompleteModalOpen)
    {
        <div class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50" @onclick="CloseCompleteModal">
            <div class="bg-zinc-900 border border-zinc-800 p-8 shadow-2xl max-w-md w-full mx-4" @onclick:stopPropagation>
                <h2 class="text-2xl font-bold text-white mb-4">Mark as Complete</h2>
                <p class="text-zinc-300 mb-6">Choose when you completed this entry:</p>
                
                <div class="space-y-4 mb-6">
                    <button @onclick="CompleteWithToday" 
                            class="w-full px-6 py-3 bg-emerald-900 hover:bg-emerald-800 text-emerald-200 border border-emerald-700 font-medium transition-colors flex items-center justify-center gap-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                        Complete Today
                    </button>

                    <div class="border-t border-zinc-800 pt-4">
                        <label class="text-sm text-zinc-400 mb-2 block">Custom Date</label>
                        <input type="date" 
                               @bind="customCompleteDate" 
                               class="w-full px-4 py-2 bg-zinc-800 border border-zinc-700 text-white focus:outline-none focus:border-purple-500 mb-3" />
                        <button @onclick="CompleteWithCustomDate" 
                                class="w-full px-6 py-2 bg-purple-900 hover:bg-purple-800 text-purple-200 border border-purple-700 font-medium transition-colors">
                            Complete on @customCompleteDate.ToString("MM/dd/yyyy")
                        </button>
                    </div>
                </div>

                <div class="flex gap-3 justify-end">
                    <button @onclick="CloseCompleteModal" 
                            class="px-6 py-2 bg-zinc-800 hover:bg-zinc-700 text-white border border-zinc-700 font-medium transition-colors">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    }

    @if (isDeleteModalOpen)
    {
        <div class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50" @onclick="CloseDeleteConfirmation">
            <div class="bg-zinc-900 border border-zinc-800 p-8 shadow-2xl max-w-md w-full mx-4" @onclick:stopPropagation>
                <h2 class="text-2xl font-bold text-white mb-4">Delete Entry</h2>
                <p class="text-zinc-300 mb-6">Are you sure you want to delete "@entrySnapshot.Title"? This action cannot be undone.</p>
                <div class="flex gap-3 justify-end">
                    <button @onclick="CloseDeleteConfirmation" 
                            class="px-6 py-2 bg-zinc-800 hover:bg-zinc-700 text-white border border-zinc-700 font-medium transition-colors">
                        Cancel
                    </button>
                    <button @onclick="ConfirmDelete" 
                            class="px-6 py-2 bg-red-900 hover:bg-red-800 text-red-200 border border-red-700 font-medium transition-colors">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    }
}
